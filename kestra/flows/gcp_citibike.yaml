id: gcp_citibike
namespace: citibike
description: |
  NY Citi Bike data source: https://s3.amazonaws.com/tripdata/index.html

variables:
  file: "JC-{{trigger.date | date('yyyyMM')}}-citibike-tripdata.csv"
  gcs_file: "gs://{{kv('GCP_BUCKET_NAME')}}/{{vars.file}}"
  table: "{{kv('GCP_DATASET')}}.JC-{{trigger.date | date('yyyyMM')}}-citibike-tripdata"
  data: "{{outputs.extract.outputFiles['JC-' ~ (trigger.date | date('yyyyMM')) ~ '-citibike-tripdata.csv']}}"

tasks:
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file: "{{render(vars.file)}}"

  - id: extract
    type: io.kestra.plugin.scripts.shell.Commands
    outputFiles:
      - "*.csv"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    commands:
      - |
         # Download and extract Citi Bike ZIP file
         set -e
         echo "Downloading {{render(vars.file)}}.zip..."
         wget --tries=3 --timeout=60 -q "https://s3.amazonaws.com/tripdata/{{render(vars.file)}}.zip" -O temp.zip && \
         echo "Validating ZIP archive..." && \
         unzip -tq temp.zip && \
         echo "Extracting CSV..." && \
         unzip -p temp.zip > "{{render(vars.file)}}" && \
         echo "Cleaning up null characters..." && \
         sed -i 's/\x0//g' "{{render(vars.file)}}" && \
         echo "Successfully extracted and cleaned {{render(vars.file)}}"


  - id: upload_to_gcs
    type: io.kestra.plugin.gcp.gcs.Upload
    from: "{{render(vars.data)}}"
    to: "{{render(vars.gcs_file)}}"


  - id: bq_citibike_tripdata
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
          CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.citibike_tripdata`
          (
              unique_row_id BYTES OPTIONS (description = 'A unique identifier for the trip, generated by hashing key trip attributes.'),
              filename STRING OPTIONS (description = 'The source filename from which the trip data was loaded.'), 
              ride_id STRING OPTIONS (description = 'Unique identifier for each ride'),
              rideable_type STRING OPTIONS (description = 'Type of bicycle used for the ride'),
              started_at TIMESTAMP OPTIONS (description = 'When the ride began'),
              ended_at TIMESTAMP OPTIONS (description = 'When the ride ended'),
              start_station_name STRING OPTIONS (description = 'Name of station where ride started'),
              start_station_id STRING OPTIONS (description = 'ID of station where ride started'),
              end_station_name STRING OPTIONS (description = 'Name of station where ride ended'),
              end_station_id STRING OPTIONS (description = 'ID of station where ride ended'),
              start_lat FLOAT64 OPTIONS (description = 'Latitude of ride start location'),
              start_lng FLOAT64 OPTIONS (description = 'Longitude of ride start location'),
              end_lat FLOAT64 OPTIONS (description = 'Latitude of ride end location'),
              end_lng FLOAT64 OPTIONS (description = 'Longitude of ride end location'),
              member_casual STRING OPTIONS (description = 'Type of rider: member or casual')
          )
          PARTITION BY DATE(started_at);

  - id: bq_citibike_table_ext
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
          CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`
          (
               
              ride_id STRING OPTIONS (description = 'identifier for each ride'),
              rideable_type STRING OPTIONS (description = 'Type of bicycle used for the ride'),
              started_at TIMESTAMP OPTIONS (description = 'When the ride began'),
              ended_at TIMESTAMP OPTIONS (description = 'When the ride ended'),
              start_station_name STRING OPTIONS (description = 'Name of station where ride started'),
              start_station_id STRING OPTIONS (description = 'ID of station where ride started'),
              end_station_name STRING OPTIONS (description = 'Name of station where ride ended'),
              end_station_id STRING OPTIONS (description = 'ID of station where ride ended'),
              start_lat FLOAT64 OPTIONS (description = 'Latitude of ride start location'),
              start_lng FLOAT64 OPTIONS (description = 'Longitude of ride start location'),
              end_lat FLOAT64 OPTIONS (description = 'Latitude of ride end location'),
              end_lng FLOAT64 OPTIONS (description = 'Longitude of ride end location'),
              member_casual STRING OPTIONS (description = 'Type of rider: member or casual')
          )
          OPTIONS (
             format = 'CSV',
             uris = ['{{render(vars.gcs_file)}}'],
             skip_leading_rows = 1,
             ignore_unknown_values = TRUE,
             allow_jagged_rows = TRUE

          );
  - id: bq_citibike_table_tmp
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
          CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}`
          AS
          SELECT
            MD5(CONCAT(
              COALESCE(CAST(REGEXP_REPLACE(ride_id, r'\x00', '') AS STRING), ""),
              COALESCE(CAST(started_at AS STRING), ""),
              COALESCE(CAST(start_station_id AS STRING), ""),
              COALESCE(CAST(end_station_id AS STRING), ""),
              COALESCE(CAST(member_casual AS STRING), "")
            )) AS unique_row_id,
            "{{render(vars.file)}}" AS filename,
            *
          FROM `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`;

  - id: bq_green_merge
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
          MERGE INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.citibike_tripdata` T
          USING `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}` S
          ON T.unique_row_id = S.unique_row_id
          WHEN NOT MATCHED THEN
            INSERT (unique_row_id,filename,ride_id,rideable_type,started_at,ended_at,start_station_name,start_station_id,end_station_name,end_station_id,start_lat,start_lng,end_lat,end_lng,member_casual)
            VALUES (S.unique_row_id,S.filename,S.ride_id,S.rideable_type,S.started_at,S.ended_at,S.start_station_name,S.start_station_id,S.end_station_name,
            S.end_station_id,S.start_lat,S.start_lng,S.end_lat,S.end_lng,
            S.member_casual);

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: If you'd like to explore Kestra outputs, disable it.
    disabled: false

pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('GCP_CREDS')}}"
      projectId: "{{kv('GCP_PROJECT_ID')}}"
      location: "{{kv('GCP_LOCATION')}}"
      bucket: "{{kv('GCP_BUCKET_NAME')}}"

triggers:
  - id: citibike_schedule
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 9 1 * *"
    inputs:
      taxi: citibike

